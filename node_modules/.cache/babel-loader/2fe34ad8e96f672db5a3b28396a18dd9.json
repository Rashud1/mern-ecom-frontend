{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hp\\\\OneDrive\\\\Documents\\\\Developer\\\\mern-ecommerce\\\\mern-ecommerce\\\\frontend\\\\src\\\\screens\\\\ProductScreen.js\",\n    _s = $RefreshSig$();\n\nimport axios from 'axios';\nimport React, { useEffect, useReducer } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'FETCH_REQUEST':\n      return { ...state,\n        loading: true\n      };\n\n    case 'FETCH_SUCCESS':\n      return { ...state,\n        products: action.payload,\n        loading: false\n      };\n\n    case 'FETCH_FAIL':\n      return { ...state,\n        loading: false,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n\nfunction ProductScreen() {\n  _s();\n\n  //we have to use hooks from react router dom that is use params to get the product in the product screen through data.js//\n  const params = useParams();\n  const {\n    slug\n  } = params;\n  const [{\n    loading,\n    error,\n    product\n  }, dispatch] = useReducer(reducer, {\n    loading: true,\n    product: [],\n    error: ''\n  }); // /... usestate function returns an array that contains a variable and function to update this variable.../\n  // const [products, setProducts] = useState([]);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      dispatch({\n        type: 'FETCH_REQUEST'\n      });\n\n      try {\n        const result = await axios.get(`http://localhost:5000/api/products/slug/${slug}`);\n        dispatch({\n          type: 'FETCH_SUCCESS',\n          payload: result.data\n        });\n      } catch (error) {\n        dispatch({\n          type: 'FETCH_FAIL',\n          payload: error.message\n        });\n      } //setProducts(result.data);\n\n    };\n\n    fetchData();\n  }, [slug]);\n  return loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n    children: error\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n    children: product.name\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ProductScreen, \"UkYasxFQW/1pn6fbqMiYAVDNzeE=\", false, function () {\n  return [useParams];\n});\n\n_c = ProductScreen;\nexport default ProductScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProductScreen\");","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Documents/Developer/mern-ecommerce/mern-ecommerce/frontend/src/screens/ProductScreen.js"],"names":["axios","React","useEffect","useReducer","useParams","reducer","state","action","type","loading","products","payload","error","ProductScreen","params","slug","product","dispatch","fetchData","result","get","data","message","name"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,UAA3B,QAA6C,OAA7C;AACA,SAASC,SAAT,QAA0B,kBAA1B;;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,aAAO,EAAE,GAAGF,KAAL;AAAYG,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAK,eAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYI,QAAAA,QAAQ,EAAEH,MAAM,CAACI,OAA7B;AAAsCF,QAAAA,OAAO,EAAE;AAA/C,OAAP;;AACF,SAAK,YAAL;AACE,aAAO,EAAE,GAAGH,KAAL;AAAYG,QAAAA,OAAO,EAAE,KAArB;AAA4BG,QAAAA,KAAK,EAAEL,MAAM,CAACI;AAA1C,OAAP;;AACF;AACE,aAAOL,KAAP;AARJ;AAUD,CAXD;;AAYA,SAASO,aAAT,GAAyB;AAAA;;AACvB;AACA,QAAMC,MAAM,GAAGV,SAAS,EAAxB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAWD,MAAjB;AACA,QAAM,CAAC;AAAEL,IAAAA,OAAF;AAAWG,IAAAA,KAAX;AAAkBI,IAAAA;AAAlB,GAAD,EAA8BC,QAA9B,IAA0Cd,UAAU,CAACE,OAAD,EAAU;AAClEI,IAAAA,OAAO,EAAE,IADyD;AAElEO,IAAAA,OAAO,EAAE,EAFyD;AAGlEJ,IAAAA,KAAK,EAAE;AAH2D,GAAV,CAA1D,CAJuB,CASvB;AACA;;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAG,YAAY;AAC5BD,MAAAA,QAAQ,CAAC;AAAET,QAAAA,IAAI,EAAE;AAAR,OAAD,CAAR;;AACA,UAAI;AACF,cAAMW,MAAM,GAAG,MAAMnB,KAAK,CAACoB,GAAN,CAClB,2CAA0CL,IAAK,EAD7B,CAArB;AAGAE,QAAAA,QAAQ,CAAC;AAAET,UAAAA,IAAI,EAAE,eAAR;AAAyBG,UAAAA,OAAO,EAAEQ,MAAM,CAACE;AAAzC,SAAD,CAAR;AACD,OALD,CAKE,OAAOT,KAAP,EAAc;AACdK,QAAAA,QAAQ,CAAC;AAAET,UAAAA,IAAI,EAAE,YAAR;AAAsBG,UAAAA,OAAO,EAAEC,KAAK,CAACU;AAArC,SAAD,CAAR;AACD,OAT2B,CAW5B;;AACD,KAZD;;AAaAJ,IAAAA,SAAS;AACV,GAfQ,EAeN,CAACH,IAAD,CAfM,CAAT;AAgBA,SAAON,OAAO,gBACZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADY,GAEVG,KAAK,gBACP;AAAA,cAAMA;AAAN;AAAA;AAAA;AAAA;AAAA,UADO,gBAGP;AAAA,cAAMI,OAAO,CAACO;AAAd;AAAA;AAAA;AAAA;AAAA,UALF;AAOD;;GAnCQV,a;UAEQT,S;;;KAFRS,a;AAqCT,eAAeA,aAAf","sourcesContent":["import axios from 'axios';\r\nimport React, { useEffect, useReducer } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nconst reducer = (state, action) => {\r\n  switch (action.type) {\r\n    case 'FETCH_REQUEST':\r\n      return { ...state, loading: true };\r\n    case 'FETCH_SUCCESS':\r\n      return { ...state, products: action.payload, loading: false };\r\n    case 'FETCH_FAIL':\r\n      return { ...state, loading: false, error: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\nfunction ProductScreen() {\r\n  //we have to use hooks from react router dom that is use params to get the product in the product screen through data.js//\r\n  const params = useParams();\r\n  const { slug } = params;\r\n  const [{ loading, error, product }, dispatch] = useReducer(reducer, {\r\n    loading: true,\r\n    product: [],\r\n    error: '',\r\n  });\r\n  // /... usestate function returns an array that contains a variable and function to update this variable.../\r\n  // const [products, setProducts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      dispatch({ type: 'FETCH_REQUEST' });\r\n      try {\r\n        const result = await axios.get(\r\n          `http://localhost:5000/api/products/slug/${slug}`\r\n        );\r\n        dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\r\n      } catch (error) {\r\n        dispatch({ type: 'FETCH_FAIL', payload: error.message });\r\n      }\r\n\r\n      //setProducts(result.data);\r\n    };\r\n    fetchData();\r\n  }, [slug]);\r\n  return loading ? (\r\n    <div>Loading...</div>\r\n  ) : error ? (\r\n    <div>{error}</div>\r\n  ) : (\r\n    <div>{product.name}</div>\r\n  );\r\n}\r\n\r\nexport default ProductScreen;\r\n"]},"metadata":{},"sourceType":"module"}